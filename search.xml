<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>终于定制出顺手的Obsidian斜杠命令</title>
      <link href="/2022/12/26/%E7%BB%88%E4%BA%8E%E5%AE%9A%E5%88%B6%E5%87%BA%E9%A1%BA%E6%89%8B%E7%9A%84Obsidian%E6%96%9C%E6%9D%A0%E5%91%BD%E4%BB%A4/"/>
      <url>/2022/12/26/%E7%BB%88%E4%BA%8E%E5%AE%9A%E5%88%B6%E5%87%BA%E9%A1%BA%E6%89%8B%E7%9A%84Obsidian%E6%96%9C%E6%9D%A0%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>wolai、语雀、思源笔记等笔记软件，有一个特别好用的功能，通过斜杠打开快速输入面板，让我们快速输入 markdown、插入图片外链、插入文件、插入 iframe 等，十分方便。</p><p>但当我使用 obsidian 发现，它竟然默认不支持这个。需要你手动去配置核心插件和安装第三方插件你来达到你想要的要求。</p><p>这里记录一下笔者探索的过程。</p><blockquote><p>下文以 ob 代替 obsidian</p></blockquote><h2 id="斜杠命令-命令面板"><a href="#斜杠命令-命令面板" class="headerlink" title="斜杠命令 + 命令面板"></a>斜杠命令 + 命令面板</h2><h4 id="开启斜杠命令"><a href="#开启斜杠命令" class="headerlink" title="开启斜杠命令"></a>开启斜杠命令</h4><p>ob 有一个核心插件斜杠命令，在设置中开启（默认是关闭）：<br><img src="https://img2023.cnblogs.com/blog/1364466/202212/1364466-20221226151930915-48817265.png" alt="image"></p><p>这时候你就能在文件中输入<code>/</code>，就会出现如下面板：<br><img src="https://img2023.cnblogs.com/blog/1364466/202212/1364466-20221226152012826-349426145.gif" alt="image"></p><p>虽然斜杠命令是生效了，<strong>可是问题来了：显示的选项并不是你想要的，你只能通过输入来筛选出你希望的选项</strong>。</p><h4 id="命令面板置顶"><a href="#命令面板置顶" class="headerlink" title="命令面板置顶"></a>命令面板置顶</h4><p>我们还可以利用另外一个<strong>核心插件命令面板，利用其置顶功能，将斜杠选项固定下来</strong>。</p><p><img src="https://img2023.cnblogs.com/blog/1364466/202212/1364466-20221226152038340-734163467.gif" alt="image"></p><h4 id="两者结合效果"><a href="#两者结合效果" class="headerlink" title="两者结合效果"></a>两者结合效果</h4><p>最后的结合的效果，已经初具雏形：</p><p><img src="https://img2023.cnblogs.com/blog/1364466/202212/1364466-20221226152109622-81103791.png" alt="image"></p><p>但再 🤔 思考一下，还是存在问题: <strong>markdown 语法的命令实在有点少，比如 table、代码块等，这些命令面板本身是找不到的，置顶不了，而且这么多命令一个个置顶再排序也很麻烦</strong></p><h2 id="拥有更好的-Markdown-助手"><a href="#拥有更好的-Markdown-助手" class="headerlink" title="拥有更好的 Markdown 助手"></a>拥有更好的 Markdown 助手</h2><blockquote><p>这里假设你掌握了自行<strong>安装第三方插件</strong>的方法</p></blockquote><p>既然本身的 markdown 命令少，我们试试第三方插件<code>Markdown Formatting Assistant</code>，并且置顶插件的命令<code>Markdown Formatting Assistant: Open Command Selector</code>。</p><p>看看效果图，拥有更多的 markdown 语法集合，<em>缺点可能是需要点击多一次</em></p><p><img src="https://img2023.cnblogs.com/blog/1364466/202212/1364466-20221226152144853-2120472543.gif" alt="image"></p><h2 id="实现插入-iframe-命令"><a href="#实现插入-iframe-命令" class="headerlink" title="实现插入 iframe 命令"></a>实现插入 iframe 命令</h2><p>插入 iframe，引用外部网站资源比如脑图、视频等，这个功能还是很常见的。对于 ob，实现逻辑很简单，只需要在文件中插入这么一段内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span></span></span><br><span class="line"><span class="tag">  <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">height</span>=<span class="string">&quot;500px&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">scrolling</span>=<span class="string">&quot;yes&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">src</span>=<span class="string">&quot;http://www.baidu.com&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后修改链接、宽、高即可。</p><p>而插入的过程，我们可以使用第三方插件<code>Quick Add</code>，选择添加<code>Capture</code>，填写选项：<br><img src="https://img2023.cnblogs.com/blog/1364466/202212/1364466-20221226152201265-1686349301.png" alt="image"></p><p><img src="https://img2023.cnblogs.com/blog/1364466/202212/1364466-20221226152215403-679471545.png" alt="image"></p><p>最后输入<code>/</code>效果：</p><p><img src="https://img2023.cnblogs.com/blog/1364466/202212/1364466-20221226152234175-722407236.png" alt="image"></p><h2 id="更统一的选项"><a href="#更统一的选项" class="headerlink" title="更统一的选项"></a>更统一的选项</h2><p>上面的效果，其实基本是够用了，但是希望有：<br><strong>1. 更统一的图标+ 命名</strong><br><strong>2. 还希望支持首字母拼音筛选</strong></p><p>这时候我们使用<code>Quick Add</code>的<code>Macro</code>选项，新增命令执行旧的命令即可，以改写<code>markdown Formatting Assistant</code> 命令为例:</p><ol><li>添加 Macro</li></ol><p><img src="https://img2023.cnblogs.com/blog/1364466/202212/1364466-20221226152330775-579102861.gif" alt="image"></p><ol start="2"><li>添加命令</li></ol><p><img src="https://img2023.cnblogs.com/blog/1364466/202212/1364466-20221226152359334-968778534.gif" alt="image"></p><p>如此往复，别名了好几个其他命令，最后的效果（_括号的字母为首字母拼音，方便搜索_）：<br><img src="https://img2023.cnblogs.com/blog/1364466/202212/1364466-20221226152417382-158678649.png" alt="image"></p><p>效果还是很理想的 🚀 ，后续修改添加删除也很容易！</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>利用斜杠命令 + 命令面板置顶 + <code>Quick Add</code>插入内容 + <code>Quick Add</code>别名命令，就可以根据自己习惯，实现定制化的斜杠命令！</p><p>😟 小遗憾：但目前还有一个 Quick Add 的前缀，但大部分目的达到了，也算是折中方案了</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> obsidian </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git强制覆盖master</title>
      <link href="/2022/12/09/Git%E5%BC%BA%E5%88%B6%E8%A6%86%E7%9B%96master/"/>
      <url>/2022/12/09/Git%E5%BC%BA%E5%88%B6%E8%A6%86%E7%9B%96master/</url>
      
        <content type="html"><![CDATA[<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>由于公司的项目中，有一个开发分支（这里假设<code>dev</code>​）是一个严重偏离<code>master</code>​，需要我去强制覆盖<code>master</code>​。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>这个场景带来了两个问题：</p><ol><li>​<code>master</code>​是受保护不能强推</li><li>​<code>dev</code>​分支是一个严重偏离<code>master</code>​的分支，无办法先合并到<code>master</code>​再正常推送，因为会有大量的冲突</li></ol><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>虽然无法合并进入<code>master</code>​，但是这个开发分支是可以直接覆盖远程的<code>master</code>​的。经过调研，这里记录下解决步骤：</p><p>‍</p><h4 id="1-解开master分支的保护"><a href="#1-解开master分支的保护" class="headerlink" title="1. 解开master分支的保护"></a>1. 解开master分支的保护</h4><p>以gitlab为例，默认是不允许对master分支强推的，所以我们在开始前先对master分支暂停保护。</p><p>​<img src="https://s2.loli.net/2022/12/09/Geh5ag4wpSO1tvQ.png" alt="image">​</p><p>​<img src="https://s2.loli.net/2022/12/09/YxrPTocqwRGiWQV.png" alt="image">​</p><h4 id="2-执行命令"><a href="#2-执行命令" class="headerlink" title="2. 执行命令"></a>2. 执行命令</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 备份master</span></span><br><span class="line">git checkout master</span><br><span class="line">git checkout -b master-backup</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重置并强推master(强推前解开master的保护)</span></span><br><span class="line">git checkout dev</span><br><span class="line">git checkout master</span><br><span class="line">git reset --hard dev</span><br><span class="line">git push -f</span><br></pre></td></tr></table></figure><blockquote><p>git reset –hard branch  //可以重置到指定分支的最新提交记录上</p></blockquote><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端代码自动化</title>
      <link href="/2022/11/24/%E3%80%90%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E3%80%91%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
      <url>/2022/11/24/%E3%80%90%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E3%80%91%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81%E8%87%AA%E5%8A%A8%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一个项目从0到1，再到迭代开发过程，必然会很多不同的人在项目上编写代码，而每个人输出代码的风格是不一样的。为了统一基本的代码风格，我们需要前端做一些前端代码自动化的工程建设。</p><h2 id="认识Git-Hook"><a href="#认识Git-Hook" class="headerlink" title="认识Git Hook"></a>认识Git Hook</h2><p><strong>Git钩子是让开发者在特定的重要动作发生时触发自定义脚本</strong>。一般包含客户端和服务端钩子，客户端钩子还包含提交工作流、邮件工作流和其他等。</p><p>我们主要认识<strong>提交工作流钩子</strong>就可以了：</p><ul><li><code>pre-commit</code>：创建提交信息前运行，非零值退出，一般用于检查代码风格是否一致；</li><li><code>prepare-commit-msg</code>：启动提交信息编辑器之前，创建提交信息后，用于批量处理提交；</li><li><code>commit-msg</code>：接着<code>prepare-commit-msg</code>触发, 只获取一个参数获得提交信息的临时路径，非零值退出，常用于校验提交信息合法性；</li><li><code>post-commit</code>：钩子完成后执行，一般用于通知之类的事情</li></ul><h2 id="配置插件husky"><a href="#配置插件husky" class="headerlink" title="配置插件husky"></a>配置插件husky</h2><p>认识了<code>Git Hook</code>，如何来配置Git的钩子呢？原生是需要我们写脚本完成的，比较繁琐。而插件 <code>husky</code> 提供了开箱即用的命令和配置项，更适合我们前端工程。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><blockquote><p>这里我们用的husky7，网上其他文章更多的使用husky4。</p></blockquote><h4 id="1、添加husky"><a href="#1、添加husky" class="headerlink" title="1、添加husky"></a>1、添加husky</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install husky --save-dev</span><br></pre></td></tr></table></figure><h4 id="2、安装husky"><a href="#2、安装husky" class="headerlink" title="2、安装husky"></a>2、安装husky</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx husky install</span><br></pre></td></tr></table></figure><p>运行命令后，会创建 <code>.husky</code> 目录：<br><img src="https://s2.loli.net/2022/11/30/87daVtprSJYOGQ6.png" alt="image.png"></p><h4 id="3、自动化husky安装："><a href="#3、自动化husky安装：" class="headerlink" title="3、自动化husky安装："></a>3、自动化husky安装：</h4><p>当执行第二步，你有没考虑到，当别人新拉取项目后，难道还要执行一遍安装命令，有没办法可以做到自动化安装呢？有的，<strong>通过 <strong><code>**npm install**</code></strong>  会默认执行 名为</strong><code>**prepare**</code>** 这个脚本**。</p><p>自动添加，在npm版本是7以上使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm set-script prepare &quot;husky install&quot;</span><br></pre></td></tr></table></figure><p>手动添加：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;prepare&quot;</span><span class="punctuation">:</span> <span class="string">&quot;husky install&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="添加钩子"><a href="#添加钩子" class="headerlink" title="添加钩子"></a>添加钩子</h3><h4 id="1、添加钩子"><a href="#1、添加钩子" class="headerlink" title="1、添加钩子"></a>1、添加钩子</h4><p>比如要添加一个 <code>pre-commit</code> 的钩子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx husky add .husky/pre-commit &quot;echo &#x27;提交前触发！！&#x27;&quot;</span><br></pre></td></tr></table></figure><p>提交后， <code>.husky</code> 会增加一个文件，并且把脚本放到文件中，如下图：<br><img src="https://s2.loli.net/2022/11/30/sampzdXCfWPY7cq.png" alt="image.png"><br>可以尝试无内容提交，测试一下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;空内容&quot;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/11/30/SxajdiD5Hlu8BAh.png" alt="image.png"><br>总的来说，添加钩子的用法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx husky add .husky/钩子名 &quot;脚本&quot;</span><br></pre></td></tr></table></figure><h4 id="2、提交钩子"><a href="#2、提交钩子" class="headerlink" title="2、提交钩子"></a>2、提交钩子</h4><p>添加了一个新钩子，记得把提交到git中。</p><h2 id="代码风格校验"><a href="#代码风格校验" class="headerlink" title="代码风格校验"></a>代码风格校验</h2><p>我们常用 <code>Eslint</code> 来强制代码风格，但处理的对象是整个工程效率是慢的。引入 <code>lint-staged</code> 就能解决这个问题，通过只对提交的代码进行格式化，保证在很小文件范围内进行处理操作。</p><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p><code>lint-staged</code> 提供了一个快捷的命令，可以让你项目轻易使用上 <code>lint-staged</code> :</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx mrm@2 lint-staged</span><br></pre></td></tr></table></figure><p>这个命令做了很多事情：</p><ol><li>安装husky;</li><li>安装lint-staged;</li><li>添加或者更新 <code>pre-commit</code> 钩子，增加执行 <code>npx lint-staged</code> ；</li><li>检测项目是否添加 <code>eslint</code> 和 <code>prettier</code> , 在 <code>package.json</code> 中添加相关配置。<h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3>安装时，提供的配置是默认的：<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;lint-staged&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;*.js&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eslint --cache --fix&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>我们需要根据自己工程进行定制，比如我用的vue项目，只需要针对的目标是src目录中的主要文件格式：<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;lint-staged&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;src/**/*.&#123;js,jsx,vue,ts,tsx&#125;&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eslint --fix&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="提交信息风格校验"><a href="#提交信息风格校验" class="headerlink" title="提交信息风格校验"></a>提交信息风格校验</h2><p>代码的风格我们进行了规范，提交的信息我们也可以检验起来，让项目的提交记录都保持一致。这里我们用 <code>commitlint</code> 。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 安装commtlint及常用社区规范config-conventional</span><br><span class="line">npm install --save-dev @commitlint/&#123;cli,config-conventional&#125;</span><br><span class="line"></span><br><span class="line">// 添加约定性规范到配置文件中</span><br><span class="line">echo &quot;module.exports = &#123; extends: [&#x27;@commitlint/config-conventional&#x27;] &#125;;&quot; &gt; commitlint.config.js</span><br><span class="line"></span><br><span class="line">// 添加钩子</span><br><span class="line">npx husky add .husky/commit-msg &#x27;npx --no-install commitlint --edit $1&#x27;</span><br></pre></td></tr></table></figure><p>当然在这个约定性规范，也可以参考文档去做一些项目的定制化，但一般不会更改。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过搭配使用 <code>husky、lint-staged、eslint、commitlint</code> ，就可以打造出基本的前端代码风格自动化流程。画了个流程图，更好总结校验流程。<br><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/1561615/1626337467906-4ba8bb08-617a-451d-bf87-57926b5577c8.jpeg"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-Git-%E9%92%A9%E5%AD%90">Git 钩子</a></li><li><a href="https://typicode.github.io/husky/#/?id=automatic-recommended">husky文档</a></li><li><a href="https://github.com/okonet/lint-staged">lint-staged文档</a></li><li><a href="https://github.com/typicode/commitlint">commitlint文档</a></li><li><a href="https://www.npmjs.com/package/@commitlint/config-conventional">约定性提交规范</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Git同步思源笔记</title>
      <link href="/2022/10/22/%E3%80%90%E6%80%9D%E6%BA%90%E7%AC%94%E8%AE%B0%E3%80%91%E5%88%A9%E7%94%A8Git%E5%90%8C%E6%AD%A5%E6%80%9D%E6%BA%90%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/10/22/%E3%80%90%E6%80%9D%E6%BA%90%E7%AC%94%E8%AE%B0%E3%80%91%E5%88%A9%E7%94%A8Git%E5%90%8C%E6%AD%A5%E6%80%9D%E6%BA%90%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>思源笔记是一款优秀的本地优先的双链大纲笔记软件，拥有强大的笔记编辑功能且都是免费，唯一付费的就是云同步等一些服务了。但如果暂时还用不着云同步的，我们可以利用 Git 同步思源笔记。</p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><ul><li><p>Git这套方案 和官方同步是有差异的，唯一优点就是<strong>免费</strong>，意味着你得包涵以下缺点：</p><ul><li>移动端<ul><li>移动端只能查看（我个人觉得移动端写笔记的场景很少，可以用语雀小记或者 flomo 来代替记录）</li><li>移动端的同步有点麻烦，但总体是建立在很少使用的场景下</li><li>只能在 Android（目前）</li></ul></li><li>PC 端<ul><li>PC 端使用思源笔记前，记得拉取一下笔记数据</li><li>PC 端使用思源笔记后，记得提交一下笔记数据</li></ul></li></ul></li><li><p> Git 和第三方云盘相比较，不用担心同步导致的错误问题（因为官方思源笔记不支持通过第三方同步盘进行同步），因为每次的同步都两个版本有差异你是需要手动解决冲突的，保证了备份的稳定性，而且 git 的记录方便回滚任意记录的笔记数据</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>前置准备动作：</p></li><li><p>本地已安装 Git</p></li><li><p>有一个 GitHub 或 Gitee 的账号，建议 Gitee 国内速度稳定</p></li><li><p>一台安卓手机</p><h4 id="PC"><a href="#PC" class="headerlink" title="PC"></a>PC</h4></li></ul><ol><li>打开思源笔记的 <code>设置</code> ，选择 <code>关于</code> 找到 <code>工作空间目录</code></li></ol><p><img src="https://s2.loli.net/2022/11/30/mYs9R5VnATv3gdu.png" alt="image.png"></p><ol start="2"><li><p>在空间目录打开命令行工具，运行命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></li><li><p>添加 git 忽略文件（官方的目录只需同步 <code>/data</code> 目录，所以其他目录我们忽略掉）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/backup</span><br><span class="line">/conf</span><br><span class="line">/history</span><br><span class="line">/sync</span><br><span class="line">/temp</span><br><span class="line">/corrupted</span><br><span class="line">.DS_Store</span><br></pre></td></tr></table></figure></li><li><p>在 Gitee 新建一个<strong>私有仓库</strong>，按照提示配置账户邮箱，增加远端仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 配置名字和邮箱</span><br><span class="line">git config --global user.name &quot;xxx&quot;</span><br><span class="line">git config --global user.email &quot;xxx@163.com&quot;</span><br><span class="line"></span><br><span class="line"># 增加远程仓库</span><br><span class="line">git remote add origin git@gitee.com:xxx/test.git</span><br><span class="line">git push -u origin &quot;master&quot;</span><br></pre></td></tr></table></figure></li><li><p>换到另一台电脑，你只需要通过 <code>git clone</code> 克隆下来，在思源笔记的 <code>设置</code> ，选择 <code>关于</code> 找到 <code>工作空间目录</code>，切换到该目录即可。</p></li></ol><p><strong>完成上面的1-5步其实已经可以将思源笔记的数据进行备份了，可以实现家里和公司的笔记同步备份。</strong></p><h4 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h4><p>PC 很简单，移动端就比较麻烦了，移动端由于 Android11 开始不能编辑 <code>Android/data</code> 里面的数据（除非手机自己 root），但思源笔记的数据又是在其中，所以无法用第三方软件（如 folderSync）来同步。所以我们得换一种方式，通过在 <code>设置</code> 的通过 <code>导入</code> 数据实现，而且导入的格式为将 <code>data</code> 目录打包成 <code>zip</code>。</p><h5 id="MGit"><a href="#MGit" class="headerlink" title="MGit"></a>MGit</h5><p>对于安卓，我们可以通过 <code>MGit</code> 来实现 git 项目的下载，这个 app 的页面很简单，步骤是：</p><ol><li>首先点击右上角图标进入设置，设置好存储位置</li></ol><p><img src="https://s2.loli.net/2022/11/30/nyS1YwHBZVrLa3W.png" alt="image.png"></p><ol start="2"><li>点击  添加远程地址和本地路径，克隆即可，过程会提示输入账号和密码（非 SSH）</li></ol><p><img src="https://s2.loli.net/2022/11/30/gOcP6rp9UfqtyuH.png" alt="image.png"></p><ol start="3"><li>将拉取的 data 目录，通过手机打包成 zip 格式</li><li>在思源笔记中的设置选取导入数据，选择第 3 步打包出来的文件<h5 id="省略-zip-打包"><a href="#省略-zip-打包" class="headerlink" title="省略 zip 打包"></a>省略 zip 打包</h5>后续每次移动端同步还是很麻烦，拉取下来需要手机打包工具 zip，最后还要选择导入，有没办法省略其中一些环节呢？有的，我们可以将这个打包过程前置到 PC 端提交数据时去做。</li></ol><p>那我们不妨写一个脚本去做这个事情，在 PC 端的工作目录下新建一个 <code>build.sh</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line"># 打包data并备份数据</span><br><span class="line"></span><br><span class="line"># 变量</span><br><span class="line">PACKAGE_NAME=&quot;data&quot;</span><br><span class="line">DATETIME=`date &quot;+%Y-%m-%d %H:%M:%S&quot;`</span><br><span class="line">TARGET_BRANCH=&quot;master&quot;</span><br><span class="line"></span><br><span class="line"># 检测git空间状态</span><br><span class="line">if [[ -n $(git status --s)  ]];then</span><br><span class="line">  # 打包</span><br><span class="line">  rm -f $PACKAGE_NAME.zip</span><br><span class="line">  zip -r $PACKAGE_NAME.zip $PACKAGE_NAME</span><br><span class="line"></span><br><span class="line">  # 提交推送</span><br><span class="line">  if [ $? -eq 0 ]; then</span><br><span class="line">    git add .</span><br><span class="line">    git commit -m &quot;$DATETIME&quot;</span><br><span class="line">    git pull</span><br><span class="line">    git push --set-upstream origin $TARGET_BRANCH</span><br><span class="line">  fi</span><br><span class="line">else</span><br><span class="line">  echo &quot;workspce no changes&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>每次写完笔记需要提交时，我们就在 <code>git bash</code> 在目录下执行 <code>.build.sh</code> 就可以了，打包，提交，推送，全部动作一个脚本搞好。</p><blockquote><p>mac 本身支持 zip 打包，windows 要在 git bash 中使用 zip 命令打包，可以参考<a href="https://www.jianshu.com/p/0d495f2aef39">这篇文章</a></p></blockquote><p>那经过前置打包后，每次移动端我们只需要两步：</p><ul><li><code>Mgit</code> 拉取笔记数据</li><li><code>Siyuan</code> App 设置导入选取笔记数据下 <code>data.zip</code> 即可<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>这是笔者个人的同步思路，虽然不完美，但也解决了 PC 端同步，移动端能偶尔但能随时查看的需求。后续重度使用后，也会考虑云端服务。<br>‍</li></ul><p>‍</p><p>‍</p><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思源笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pinia状态持久化</title>
      <link href="/2022/04/12/%E3%80%90vue%E3%80%91pinia%E7%8A%B6%E6%80%81%E6%8C%81%E4%B9%85%E5%8C%96/"/>
      <url>/2022/04/12/%E3%80%90vue%E3%80%91pinia%E7%8A%B6%E6%80%81%E6%8C%81%E4%B9%85%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="利用watch深度监听"><a href="#利用watch深度监听" class="headerlink" title="利用watch深度监听"></a>利用<code>watch</code>深度监听</h2><p>通过监听pinia状态变化来缓存，特点是简单粗暴</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp, watch &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;./router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>();</span><br><span class="line">app.<span class="title function_">use</span>(pinia);</span><br><span class="line"></span><br><span class="line"><span class="comment">// pinia状态持久化</span></span><br><span class="line"><span class="keyword">const</span> piniaState = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;piniaState&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (piniaState) &#123;</span><br><span class="line">  pinia.<span class="property">state</span>.<span class="property">value</span> = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(piniaState);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">watch</span>(</span><br><span class="line">  pinia.<span class="property">state</span>,</span><br><span class="line">  <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// persist the whole state to the local storage whenever it changes</span></span><br><span class="line">    <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;piniaState&quot;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(state));</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">deep</span>: <span class="literal">true</span> &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(router);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="利用plugins实现"><a href="#利用plugins实现" class="headerlink" title="利用plugins实现"></a>利用<code>plugins</code>实现</h2><p><code>plguins</code>提供了针对每个<code>store</code>的颗粒度操作，我们利用其中的<code>store.$subscribe()</code>和<code>store.$patch</code>就可以做到持久化的作用，再通过<code>options.persist</code>属性设置来进一步控制持久化的开关。</p><p>持久化插件函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> type &#123; <span class="title class_">PiniaPluginContext</span> &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"></span><br><span class="line">declare <span class="variable language_">module</span> <span class="string">&quot;pinia&quot;</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> interface <span class="title class_">DefineStoreOptionsBase</span>&lt;S <span class="keyword">extends</span> <span class="title class_">StateTree</span>, <span class="title class_">Store</span>&gt; &#123;</span><br><span class="line">    persist?: boolean;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> (<span class="params">&#123; store, options &#125;: PiniaPluginContext</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!options.<span class="property">persist</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> key = store.<span class="property">$id</span>;</span><br><span class="line"></span><br><span class="line">  store.$subscribe(<span class="function">(<span class="params">mutation, state</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(key, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(state));</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> piniaState = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(key);</span><br><span class="line">  <span class="keyword">if</span> (piniaState) &#123;</span><br><span class="line">    store.$patch(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(piniaState));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在入口文件使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> myPluginPersistedstate <span class="keyword">from</span> <span class="string">&quot;@/stores/plugins/persistedstate&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>();</span><br><span class="line">pinia.<span class="title function_">use</span>(myPluginPersistedstate);</span><br><span class="line">app.<span class="title function_">use</span>(pinia);</span><br></pre></td></tr></table></figure><p>在需要持久化的<code>store</code>中设置<code>persist: true</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCounterStore = <span class="title function_">defineStore</span>(&#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="string">&quot;counter&quot;</span>,</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">counter</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">persist</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="使用第三方插件"><a href="#使用第三方插件" class="headerlink" title="使用第三方插件"></a>使用第三方插件</h2><p>一些现成的第三方插件（建议：<a href="https://github.com/prazdevs/pinia-plugin-persistedstate">pinia-plugin-persistedstate</a>），可以提供更精细化的控制，比如：开启持久化、缓存方式、自定义缓存key等。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://pinia.vuejs.org/">pinia</a></li><li><a href="https://github.com/prazdevs/pinia-plugin-persistedstate">pinia-plugin-persistedstate</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pinia </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>overflow_auto在flex_1的容器失效</title>
      <link href="/2022/02/22/%E3%80%90css%E3%80%91overflow_auto%E5%9C%A8flex_1%E7%9A%84%E5%AE%B9%E5%99%A8%E5%A4%B1%E6%95%88/"/>
      <url>/2022/02/22/%E3%80%90css%E3%80%91overflow_auto%E5%9C%A8flex_1%E7%9A%84%E5%AE%B9%E5%99%A8%E5%A4%B1%E6%95%88/</url>
      
        <content type="html"><![CDATA[<p>我们经常使用<code>flex:1</code>来动态分配父容器剩余空间，这时候如果要在容器上增加滚动条，使用<code>overflow: auto</code>可能会失效。</p><h2 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h2><p>一般原因：因为容器所在的父容器采用了默认样式<code>overflow: visible</code>，即允许内容溢出到父容器外，那么就会对使用<code>flex: 1</code>的容器没有给到一个固定的高度，所以我们针对这种情况，只需要在父容器添加<code>overflow: auto</code>来让父容器创建<a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context">BFC</a>，让内容不会溢出。</p><h2 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码"></a>实例代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.parent1</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">80px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.parent2</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">flex</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 父容器创建BFC，一般使用overflow:auto */</span></span></span><br><span class="line"><span class="language-css">      <span class="attribute">overflow</span>: auto;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.child1</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">80px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: green;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.child2</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">flex</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">overflow</span>: auto;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: greenyellow;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.child2-sub</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">1000px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: orange;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child2&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child2-sub&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>History模式的配置细节</title>
      <link href="/2021/09/13/%E3%80%90nginx%E3%80%91History%E6%A8%A1%E5%BC%8F%E7%9A%84%E9%85%8D%E7%BD%AE%E7%BB%86%E8%8A%82/"/>
      <url>/2021/09/13/%E3%80%90nginx%E3%80%91History%E6%A8%A1%E5%BC%8F%E7%9A%84%E9%85%8D%E7%BD%AE%E7%BB%86%E8%8A%82/</url>
      
        <content type="html"><![CDATA[<p>我们知道，vue 单页面应用打包出来是静态资源，一般需要 nginx 或者其他服务器访问；当如果 Vue Router 是采用 History 模式时，又会有额外的配置。这里记录一下完整配置过程中的每一个细节。</p><h2 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h2><p>我们首先要配置好如何访问我们打包出来的静态资源。</p><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><p>当 URL 无需前缀时，基础的配置是这样的：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> testhistory.com;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">      <span class="attribute">root</span> /Users/admin/www/h5;</span><br><span class="line">      <span class="attribute">index</span> index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>root：<strong>静态资源的位置</strong></li><li>index: <strong>可以通过index来访问index.html，而index一般是可以省略的</strong></li></ul><p>然后配置上 Host：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 testhistory.com</span><br></pre></td></tr></table></figure><p>  就可以通过 <a href="http://testhistory.com/">http://testhistory.com</a> 就可以访问到页面了。</p><h3 id="带前缀的访问路径"><a href="#带前缀的访问路径" class="headerlink" title="带前缀的访问路径"></a>带前缀的访问路径</h3><p>有时候，同一域名下有可能多个不同的前端服务，这时候我们会通过前缀告诉 nginx 加载或者反向代理到对应的资源（比如说我司的不同城市业务对应的前端项目就不一样）。</p><p>  带前缀的静态资源配置：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> /h5 &#123;</span><br><span class="line">  <span class="attribute">root</span> /Users/admin/www;</span><br><span class="line">  <span class="attribute">index</span> index.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  不一样的地方是，当有前缀时，实际的访问路径会变成 root 路径加上前缀。所以这里，root 会去掉  /h5 。<br>  如果不想加上前缀的话，那可以使用 alias 指令 :</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> /h5 &#123;</span><br><span class="line">  <span class="attribute">alias</span> /Users/admin/www/h5;</span><br><span class="line">  <span class="attribute">index</span> index.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 <a href="http://testhistory.com/h5">http://testhistory.com/h5</a> 访问时，可以看到index.html是访问对的。</p><p>但是js和css访问有问题的，那是因为静态资源实际是在h5目录下的，而在打包出来的index.html中引用的资源没有带上h5前缀。<br><img src="https://s2.loli.net/2022/11/30/LwfozijsBCPOAt1.png" alt="image.png"><br> 很简单，只需在 vue.config.js 中配置上公共资源目录：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">publicPath</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span></span><br><span class="line">    ? <span class="string">&#x27;/h5/&#x27;</span></span><br><span class="line">    : <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">outputDir</span>: <span class="string">&#x27;h5&#x27;</span>, <span class="comment">// 加上这个配置，让打包出来的目录由默认的dist改为h5，方便写部署脚本</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  除了 js、css 公共资源目录，还有路由配置也要增加基本前缀，为了保证前端路由和服务器的一致：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">base</span>: <span class="string">&#x27;h5&#x27;</span>,</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这时候再去访问<a href="http://testhistory.com/h5">http://testhistory.com/h5</a>就无问题了。</p><h3 id="使用root还是alias"><a href="#使用root还是alias" class="headerlink" title="使用root还是alias"></a>使用root还是alias</h3><p>刚才提到这两个指令都可以，那什么时候使用呢？</p><ul><li><p><strong>当无前缀时，使用root和alias一样，一般使用root;</strong></p></li><li><p><strong>当有前缀时，如果前缀名和目录路径最后一段路径一致，那应该使用root，而不一致的话，应该使用alias.。</strong></p><h2 id="History模式"><a href="#History模式" class="headerlink" title="History模式"></a>History模式</h2><p>要开启 History 模式，vue router 的配置很简单，只要加上下面一句话：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mode</span>: <span class="string">&#x27;history&#x27;</span>,</span><br></pre></td></tr></table></figure><p>开发时访问是正常的，但当打包部署后，会发现当：</p></li><li><p>访问<a href="http://testhistory.com/h5/about">http://testhistory.com/h5</a>，正常的；</p></li><li><p>然后跳转路由到<a href="http://testhistory.com/h5/about">http://testhistory.com/h5/about</a>，也是正常的；</p></li><li><p>刷新<a href="http://testhistory.com/h5/about">http://testhistory.com/h5/about</a>，就报404了。</p></li></ul><h4 id="try-files"><a href="#try-files" class="headerlink" title="try_files"></a>try_files</h4><p>为什么会出现这种情况呢？因为刷新时时通过 nginx 去访问静态资源的，明显这个路径是找不到，因为这个只是前端路由。为了解决这个问题，我们需要当访问的是前端路由时，去访问 index.html 这个主入口，再由前端路由自己来访问到对应的页面。而 nginx 就会用到 try_files 这个指令。</p><p>先来看看加上 try_files 后的配置：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> /h5 &#123;</span><br><span class="line">  <span class="attribute">root</span> /Users/admin/www;</span><br><span class="line">  <span class="attribute">index</span> index.html;</span><br><span class="line">  <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /h5/index.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配上后，就能正常访问 <a href="http://testhistory.com/h5/about">http://testhistory.com/h5/about</a> 了。</p><p>我们看看 try_files $uri $uri/ /h5/index.html 做了什么，找到官网的语法：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">try_files</span> file... uri</span><br></pre></td></tr></table></figure><p>这个语法的意思是：</p><ul><li>try_files后面可以定义多个文件路径和最后一个作为内部跳转的uri，其中<strong>文件路径是和 <strong><code>**alias**</code></strong> 和 <strong><code>**root**</code></strong> 两个指令合在一起构造而成</strong>；</li><li>多个文件以<strong>第一个找到的文件</strong>作为请求；</li><li>而文件后面以”/“结尾，会检查目录是否存在；</li><li>当文件都找不到时，就会去<strong>以最后一个uri进行内部跳转请求</strong>。</li></ul><p>以我们例子为例：</p><ul><li><p>我定义了 <code>try_files $uri $uri/ /h5/index.html</code> ，root是 <code>/Users/admin/www</code> ；</p></li><li><p>定义了两个文件，$uri和$uri，我的访问路径时<a href="http://testhistory.com/h5/about%EF%BC%8C">http://testhistory.com/h5/about，</a> <code>$uri</code> 是 <code>/h5/about</code> ，那么加上root作为根目录不能找到 ， <code>$url/</code> 也不能找到对应的目录；</p></li><li><p>文件找不到了，那么就内部跳转到 <code>/h5/index.html</code> ，就相当于内部去请求<a href="http://testhistory.com/h5/index.html%E5%AF%B9%E5%BA%94%E7%9A%84%E6%96%87%E4%BB%B6%E8%B5%84%E6%BA%90%EF%BC%8C%E9%82%A3%E5%89%8D%E7%AB%AF%E6%8E%A5%E6%94%B6%E6%96%87%E4%BB%B6%E8%B5%84%E6%BA%90%E5%90%8E%EF%BC%8C%E5%B0%B1%E4%BC%9A%E6%A0%B9%E6%8D%AE%E8%B7%AF%E7%94%B1%E8%87%AA%E8%A1%8C%E8%B7%B3%E8%BD%AC%E5%88%B0%E5%AF%B9%E5%BA%94%E7%9A%84%E9%A1%B5%E9%9D%A2%E4%BA%86%E3%80%82">http://testhistory.com/h5/index.html对应的文件资源，那前端接收文件资源后，就会根据路由自行跳转到对应的页面了。</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2></li><li><p>通过配置History模式，我学到了：**root和alisa的区别、index指令、try_files指令和</p></li><li><p>nginx 指令是很多的，需要理解的话，需要去官网逐一查询并组合尝试，通过实际使用场景去学习，会理解得更透彻。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2></li><li><p><a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#alias">alias指令</a></p></li><li><p><a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#root">root指令</a></p></li><li><p><a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#try_files">try_files指令</a></p></li><li><p><a href="http://nginx.org/en/docs/http/ngx_http_index_module.html#index">index指令</a></p></li><li><p><a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#variables">$uri变量，见底部</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>last-child可能你也会踩的坑</title>
      <link href="/2021/07/14/%E3%80%90css%E3%80%91last-child%E5%8F%AF%E8%83%BD%E4%BD%A0%E4%B9%9F%E4%BC%9A%E8%B8%A9%E7%9A%84%E5%9D%91/"/>
      <url>/2021/07/14/%E3%80%90css%E3%80%91last-child%E5%8F%AF%E8%83%BD%E4%BD%A0%E4%B9%9F%E4%BC%9A%E8%B8%A9%E7%9A%84%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>当时写在写一个列表，列表每一项需要下面加下划线，最后一项不加下划线。第一时间，想到使用 <code>:``last-child</code> 这个伪类来实现。</p><p>当时的代码出来的 HTML 片段大致是这样的（省略号代表还有其他元素）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-box&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-item&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-item&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-item&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 最后两行是由vant的list组件添加的 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;van-list__finished-text&quot;</span>&gt;</span>沒有更多數據了<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;van-list__placeholder&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>样式是这样的：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.list-item</span> &#123;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">#eaeaea</span> <span class="number">1px</span> solid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.list-item</span><span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后一直没搞明白，为啥最后一行的底部还有下划线呢。</p><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>于是我查了 last-child 的定义：</p><blockquote><p><code>:last-child</code> CSS <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes">伪类</a> 代表父元素的最后一个子<strong>元素。</strong></p></blockquote><p>这句定义的重点是元素。</p><p>然后我得到第一次的推断：只是通过 :list-item 来定位到父元素而已， :list-child 依然会在父元素上去找最后一个子元素</p><p>于是我有写了另外一个例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.list-box</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.list-box</span> <span class="selector-class">.list-item</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.list-box</span> <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: yellow;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.list-box</span> <span class="selector-class">.list-item</span><span class="selector-pseudo">:last-child</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: green;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-item&quot;</span>&gt;</span>111<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-item&quot;</span>&gt;</span>222<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-item&quot;</span>&gt;</span>333<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>沒有更多數據了<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果最后一个 div 并没有变绿，所以证明我得推测是错误的。<br><img src="https://s2.loli.net/2022/11/30/OC2UJbKtVph7gum.png" alt="image.png"><br>然后我又改变了例子，把最后一个样式修改为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-class">.list-box</span> <span class="selector-tag">div</span><span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: green;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>就生效了：<br><img src="https://s2.loli.net/2022/11/30/Kq6n3HSLNtfd4zs.png" alt="image.png"><br>那就可以得出结论了：<br>对于样式 selector:last-child ，要想目标元素生效：既要满足 selector 选择器，还要是当前选择器的父元素最后一个元素。<br>**</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代理设置Host</title>
      <link href="/2021/02/18/%E3%80%90nginx%E3%80%91%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AEHost/"/>
      <url>/2021/02/18/%E3%80%90nginx%E3%80%91%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AEHost/</url>
      
        <content type="html"><![CDATA[<p>nginx 的 proxy 模块使我们经常会用到的模块之一，比如我们常用的 nginx 反向代理。</p><p>反向代理我们一般有这么几行配置代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">location /api &#123;</span><br><span class="line">  proxy_pass  http://127.0.0.1:9090;</span><br><span class="line">  proxy_set_header Host $host;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>proxy_pass 是反向代理的目的地址，是比较熟悉的，但第三行是什么意思呢？</p><h3 id="proxy-set-header"><a href="#proxy-set-header" class="headerlink" title="proxy_set_header"></a>proxy_set_header</h3><p>这个配置是允许你代理后修改请求头的各个字段，可支持 nginx 内置变量、字符串和两种组合方式。</p><h3 id="Host"><a href="#Host" class="headerlink" title="Host"></a>Host</h3><p>这次要详细理解的是 Host 的几种配置：</p><ol><li><code>proxy_set_header Host $proxy_host</code> </li><li><code>proxy_set_header Host $http_host</code></li><li><code>proxy_set_header Host $host</code></li></ol><p>测试流程：</p><ol><li>postman发送请求nginx服务127.0.0.1:4000；</li><li>nginx中转后node服务127.0.0.1:9090；</li><li>node服务打印request.host看看是什么。</li></ol><h4 id="proxy-host"><a href="#proxy-host" class="headerlink" title="$proxy_host"></a>$proxy_host</h4><p>默认值（不配置等同于配置了 proxy_set_header Host $proxy_host），nginx 配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">location /api &#123;</span><br><span class="line">  proxy_pass  http://127.0.0.1:9090;</span><br><span class="line">&#125;</span><br><span class="line">或</span><br><span class="line">location /api &#123;</span><br><span class="line">  proxy_pass  http://127.0.0.1:9090;</span><br><span class="line">  proxy_set_header Host $proxy_host</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代理后的请求头的 Host ： 127.0.0.1:9090 ，所以$proxy_host 为 proxy_pass 中的域名<br>**</p><h4 id="http-host"><a href="#http-host" class="headerlink" title="$http_host"></a>$http_host</h4><p>nginx 配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location /api &#123;</span><br><span class="line">  proxy_pass  http://127.0.0.1:9090;</span><br><span class="line">  proxy_set_header Host $http_host;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>postman 另外配置头部中的 Host：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1561615/1612164567047-7f8f93f9-d1b3-4705-80c8-6dcd275ba107.png#align=left&display=inline&height=144&margin=%5Bobject%20Object%5D&name=image.png&originHeight=144&originWidth=1286&size=12473&status=done&style=none&width=1286" alt="image.png"><br>代理后的请求头的 Host ： <a href="http://www.baidu.com/">www.baidu.com</a> ，所以$http_host 为代理前的请求头的 Host。<br>**</p><h3 id="host"><a href="#host" class="headerlink" title="$host"></a>$host</h3><p>$host 根据文档介绍，如果请求头有 Host 字段会取该字段，否则就会去主服务器名（也就是 server_name ）。</p><p>首先和 $http_host 一样，自定义 Host，得到的和 $http_host 是一致的，证明了前半句。</p><p>接着是传一个空的 Host，但实际上是不可行的，根据 HTTP/1.1 开规定，如果 Host 为空，会返回 400（如下图），nginx 也很好地实现了这个规定。</p><p><img src="https://s2.loli.net/2022/11/30/Zm8j2NqyJHk4PGM.png" alt="image.png"><br>而HTTP/1.0是允许的，这里猜测是该字段为了HTTP/1.0设计的。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>以上就是三种配置的差别，一般常用<code>proxy_set_header Host $host</code>。</p>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
